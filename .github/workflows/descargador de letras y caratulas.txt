# requirements: aiohttp, async-timeout, Pillow, yt-dlp, python-dotenv, beautifulsoup4, rapidfuzz
# api_keys: GENIUS_TOKEN, SPOTIFY_TOKEN, DEEZER_API, ITUNES_API_KEY, LASTFM_API_KEY, DISCOGS_TOKEN, FANARTTV_KEY, NAPSTER_API_KEY, MUSIXMATCH_API_KEY, LYRICS_OVH_API

import os
import asyncio
import aiohttp
import async_timeout
from urllib.parse import quote
from yt_dlp import YoutubeDL
from PIL import Image
from io import BytesIO
import dotenv
from bs4 import BeautifulSoup
from rapidfuzz import fuzz

dotenv.load_dotenv()

# Cargar claves API necesarias
GENIUS_TOKEN = os.getenv("GENIUS_TOKEN")
SPOTIFY_TOKEN = os.getenv("SPOTIFY_TOKEN")
DEEZER_API = os.getenv("DEEZER_API")
ITUNES_API_KEY = os.getenv("ITUNES_API_KEY")
LASTFM_API_KEY = os.getenv("LASTFM_API_KEY")
DISCOGS_TOKEN = os.getenv("DISCOGS_TOKEN")
FANARTTV_KEY = os.getenv("FANARTTV_KEY")
NAPSTER_API_KEY = os.getenv("NAPSTER_API_KEY")
MUSIXMATCH_API_KEY = os.getenv("MUSIXMATCH_API_KEY")
LYRICS_OVH_API = os.getenv("LYRICS_OVH_API")

async def retry_request(session, url, headers=None, attempts=3, delay=2):
    for attempt in range(attempts):
        try:
            async with async_timeout.timeout(5):
                async with session.get(url, headers=headers) as resp:
                    if resp.status == 200:
                        # ChartLyrics returns XML, others JSON
                        text = await resp.text()
                        if '<Lyric>' in text:
                            return text
                        return await resp.json()
                    if resp.status == 429:
                        await asyncio.sleep((attempt + 1) * delay)
        except asyncio.TimeoutError:
            await asyncio.sleep(delay)
        except Exception:
            await asyncio.sleep(delay)
    return None

class BaseFuenteAPI:
    def __init__(self, nombre, tipo, token=None):
        self.nombre = nombre
        self.tipo = tipo
        self.token = token

    async def consultar(self, session, url, parser):
        headers = {"Authorization": f"Bearer {self.token}"} if self.token else None
        respuesta = await retry_request(session, url, headers)
        if respuesta:
            return await parser(session, self.nombre, self.tipo, respuesta)
        return None

class ProcesadorImagen:
    @staticmethod
    async def validar_resolucion(session, url):
        try:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.read()
                    img = Image.open(BytesIO(data))
                    w, h = img.size
                    return w >= 600 and h >= 600
        except:
            return False
        return False

    @staticmethod
    async def redimensionar(session, url, tamaño=(600, 600)):
        try:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.read()
                    img = Image.open(BytesIO(data)).resize(tamaño, Image.ANTIALIAS)
                    return img
        except:
            return None
        return None

class EvaluadorLetras:
    PESOS = {
        "genius": 4,
        "musixmatch": 3,
        "lyrics_ovh": 2,
        "lyricsfreak": 2,
        "chartlyrics": 2,
        "songlyrics": 2
    }

    @staticmethod
    def puntuar(texto, fuente):
        if not texto or len(texto.strip()) < 100:
            return 0
        score = EvaluadorLetras.PESOS.get(fuente, 0)
        length = len(texto)
        if length > 200: score += 1
        if length > 500: score += 1
        if length > 1000: score += 1
        if texto.count("\n") > 3: score += 1
        return score

class EvaluadorPortadas:
    PESOS = {
        "spotify": 5,
        "napster": 5,
        "fanarttv": 4,
        "itunes": 3,
        "discogs": 3,
        "lastfm": 2,
        "deezer": 1
    }

    @staticmethod
    async def puntuar(session, url, fuente):
        try:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.read()
                    img = Image.open(BytesIO(data))
                    w, h = img.size
                    score = EvaluadorPortadas.PESOS.get(fuente, 0)
                    if min(w, h) >= 600: score += 1
                    if min(w, h) >= 1000: score += 1
                    if abs(w - h) < 10: score += 1
                    if len(data) > 40000: score += 1
                    return score
        except:
            return 0
        return 0

async def obtener_mejor_letra(candidatas):
    if not candidatas:
        return None
    puntajes = [EvaluadorLetras.puntuar(texto, fuente) for texto, fuente in candidatas]
    idx = puntajes.index(max(puntajes))
    texto = candidatas[idx][0]
    # limpieza y formato UltraStar
    texto = limpiar_letra_para_ultrastar(texto)
    texto = normalizar_letra(texto)
    texto = verso_por_linea(texto)
    return texto

async def obtener_mejor_portada(session, candidatas):
    if not candidatas:
        return None
    puntajes = await asyncio.gather(*(EvaluadorPortadas.puntuar(session, url, fuente) for url, fuente in candidatas))
    max_idx = puntajes.index(max(puntajes))
    return candidatas[max_idx][0] if puntajes[max_idx] > 0 else None

# Utilidades de texto

def limpiar_letra_para_ultrastar(texto):
    lineas = texto.splitlines()
    filtradas = [l.strip() for l in lineas if l.strip() and not any(k in l.lower() for k in ["http", "www", "powered", "writer"])]
    return "\n".join(filtradas)

def normalizar_letra(texto):
    import unicodedata
    n = unicodedata.normalize("NFKD", texto)
    return n.replace("“", '"').replace("”", '"').replace("–", "-").replace("’", "'")

def verso_por_linea(texto):
    return "\n".join(l.strip() for l in texto.splitlines() if l.strip())

# URLs de consulta según fuente

def f_url(nombre, artista, cancion):
    q = quote(f"{artista} {cancion}")
    if nombre == "spotify":
        return f"https://api.spotify.com/v1/search?q={q}&type=track"
    if nombre == "deezer":
        return f"https://api.deezer.com/search?q={q}"
    if nombre == "itunes":
        return f"https://itunes.apple.com/search?term={q}&limit=1"
    if nombre == "lastfm":
        return f"http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key={LASTFM_API_KEY}&artist={quote(artista)}&track={quote(cancion)}&format=json"
    if nombre == "discogs":
        return f"https://api.discogs.com/database/search?q={q}&token={DISCOGS_TOKEN}"
    if nombre == "fanarttv":
        return f"https://webservice.fanart.tv/v3/music/{quote(artista)}?api_key={FANARTTV_KEY}"
    if nombre == "napster":
        return f"https://api.napster.com/v2.2/search?apikey={NAPSTER_API_KEY}&query={q}&type=track"
    if nombre == "genius":
        return f"https://api.genius.com/search?q={q}"
    if nombre == "musixmatch":
        return f"https://api.musixmatch.com/ws/1.1/track.search?q_track={quote(cancion)}&q_artist={quote(artista)}&apikey={MUSIXMATCH_API_KEY}"
    if nombre == "lyrics_ovh":
        return f"https://api.lyrics.ovh/v1/{quote(artista)}/{quote(cancion)}"
    if nombre == "chartlyrics":
        return f"http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist={quote(artista)}&song={quote(cancion)}"
    if nombre == "lyricsfreak":
        return f"https://www.lyricsfreak.com/search.php?a=search&type=song&q={q}"
    if nombre == "songlyrics":
        return f"https://www.songlyrics.com/index.php?section=search&searchW={q}&submit=Search"
    return ""

async def obtener_portada_y_letra(session, artista, cancion):
    # intentar portada y letra de múltiples fuentes
    fuentes = [
        BaseFuenteAPI("spotify", "portada", SPOTIFY_TOKEN),
        BaseFuenteAPI("deezer", "portada"),
        BaseFuenteAPI("itunes", "portada", ITUNES_API_KEY),
        BaseFuenteAPI("lastfm", "portada"),
        BaseFuenteAPI("discogs", "portada"),
        BaseFuenteAPI("fanarttv", "portada"),
        BaseFuenteAPI("napster", "portada"),
        BaseFuenteAPI("genius", "letra", GENIUS_TOKEN),
        BaseFuenteAPI("musixmatch", "letra", None),
        BaseFuenteAPI("lyrics_ovh", "letra"),
        BaseFuenteAPI("chartlyrics", "letra"),
        BaseFuenteAPI("lyricsfreak", "letra"),
        BaseFuenteAPI("songlyrics", "letra")
    ]
    async def parser(session, nombre, tipo, datos):
        # lógica parser tal como antes, omitida para brevedad - usar implementación actual
        return await globals()[f"_parser_{tipo}"](session, nombre, datos)

    # crear tareas de consulta
    tareas = [f.consultar(session, f_url(f.nombre, artista, cancion), parser) for f in fuentes]
    resultados = await asyncio.gather(*tareas)
    # separar portadas y letras
    portadas = [(r, f.nombre) for r, f in zip(resultados, fuentes) if f.tipo == "portada" and r]
    letras = [(r, f.nombre) for r, f in zip(resultados, fuentes) if f.tipo == "letra" and r]
    # elegir mejor
    portada = await obtener_mejor_portada(session, portadas)
    letra = await obtener_mejor_letra(letras)
    # fallback a miniatura de YouTube si no hay portada
    if not portada:
        info = YoutubeDL({'quiet': True, 'skip_download': True}).extract_info(f"ytsearch:{artista} {cancion}", download=False)
        thumb = info.get('thumbnail')
        if thumb and await ProcesadorImagen.validar_resolucion(session, thumb):
            portada = thumb
    return portada, letra

async def main():
    autor = input("Autor: ").strip()
    titulo = input("Título: ").strip()
    async with aiohttp.ClientSession() as session:
        portada_url, letra = await obtener_portada_y_letra(session, autor, titulo)
        if portada_url:
            img = await ProcesadorImagen.redimensionar(session, portada_url)
            if img:
                img.save(f"{autor} - {titulo} - portada.jpg")
        else:
            print("⚠️ No se encontró portada válida.")
        if letra:
            with open(f"{autor} - {titulo} - letra.txt", 'w', encoding='utf-8') as f:
                f.write(letra)
        else:
            print("⚠️ No se encontró letra válida.")

if __name__ == '__main__':
    asyncio.run(main())
